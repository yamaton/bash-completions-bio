# Auto-generated with h2o

_seqmagick()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" help convert info mogrify primer-trim quality-filter extract-ids backtrans-align"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        help) _seqmagick_help
            return
            ;;

        convert) _seqmagick_convert
            return
            ;;

        info) _seqmagick_info
            return
            ;;

        mogrify) _seqmagick_mogrify
            return
            ;;

        primer-trim) _seqmagick_primertrim
            return
            ;;

        quality-filter) _seqmagick_qualityfilter
            return
            ;;

        extract-ids) _seqmagick_extractids
            return
            ;;

        backtrans-align) _seqmagick_backtransalign
            return
            ;;

    esac

    local word_list=" help convert info mogrify primer-trim quality-filter extract-ids backtrans-align -h --help -V --version -v --verbose -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_help()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_convert()
{
    local cmd i subcommands
    local subcommands=" source_file dest_file"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        source_file) _seqmagick_convert_sourcefile
            return
            ;;

        dest_file) _seqmagick_convert_destfile
            return
            ;;

    esac

    local word_list=" source_file dest_file -h --help --alphabet --line-wrap --sort --cut --relative-to --drop --dash-gap --lower --mask --reverse --reverse-complement --squeeze --squeeze-threshold --transcribe --translate --ungap --upper --deduplicate-sequences --deduplicated-sequences-file --deduplicate-taxa --exclude-from-file --include-from-file --head --max-length --min-length --min-ungapped-length --pattern-include --pattern-exclude --prune-empty --sample --sample-seed --seq-pattern-include --seq-pattern-exclude --tail --first-name --name-suffix --name-prefix --pattern-replace --strip-range --input-format --output-format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_convert_sourcefile()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_convert_destfile()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_info()
{
    local word_list="  -h --help --input-format --out-file --format --threads"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_mogrify()
{
    local cmd i subcommands
    local subcommands=" sequence_file"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        sequence_file) _seqmagick_mogrify_sequencefile
            return
            ;;

    esac

    local word_list=" sequence_file -h --help --alphabet --line-wrap --sort --cut --relative-to --drop --dash-gap --lower --mask --reverse --reverse-complement --squeeze --squeeze-threshold --transcribe --translate --ungap --upper --deduplicate-sequences --deduplicated-sequences-file --deduplicate-taxa --exclude-from-file --include-from-file --head --max-length --min-length --min-ungapped-length --pattern-include --pattern-exclude --prune-empty --sample --sample-seed --seq-pattern-include --seq-pattern-exclude --tail --first-name --name-suffix --name-prefix --pattern-replace --strip-range --input-format --output-format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_mogrify_sequencefile()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_primertrim()
{
    local word_list="  -h --help --reverse-is-revcomp --source-format --output-format --include-primers --max-hamming-distance --prune-action"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_qualityfilter()
{
    local word_list="  -h --help --input-qual --min-mean-quality --min-length --max-length --ambiguous-action --max-ambiguous --pct-ambiguous --report-out --details-out --no-details-comment --quality-window-mean-qual --quality-window-prop --quality-window --primer --no-primer --barcode-file --barcode-header --map-out --quoting"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_extractids()
{
    local word_list="  -h --help -o --output-file --input-format -d --include-description"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_seqmagick_backtransalign()
{
    local word_list="  -h --help -o --out-file -t --translation-table -a --fail-action"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _seqmagick seqmagick
