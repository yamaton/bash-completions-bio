# Auto-generated with h2o

_smof()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" cut clean consensus filter grep md5sum head permute reverse sample sniff sort split stat subseq tail translate uniq wc"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        cut) _smof_cut
            return
            ;;

        clean) _smof_clean
            return
            ;;

        consensus) _smof_consensus
            return
            ;;

        filter) _smof_filter
            return
            ;;

        grep) _smof_grep
            return
            ;;

        md5sum) _smof_md5sum
            return
            ;;

        head) _smof_head
            return
            ;;

        permute) _smof_permute
            return
            ;;

        reverse) _smof_reverse
            return
            ;;

        sample) _smof_sample
            return
            ;;

        sniff) _smof_sniff
            return
            ;;

        sort) _smof_sort
            return
            ;;

        split) _smof_split
            return
            ;;

        stat) _smof_stat
            return
            ;;

        subseq) _smof_subseq
            return
            ;;

        tail) _smof_tail
            return
            ;;

        translate) _smof_translate
            return
            ;;

        uniq) _smof_uniq
            return
            ;;

        wc) _smof_wc
            return
            ;;

    esac

    local word_list=" cut clean consensus filter grep md5sum head permute reverse sample sniff sort split stat subseq tail translate uniq wc -h --help -v --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_cut()
{
    local word_list="  -h --help -f --fields -v --complement"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_clean()
{
    local word_list="  -h --help -t --type -u --toupper -l --tolower -x --toseq -s --reduce-header --delimiter -r --mask-irregular -m --mask-lowercase -w --col_width -d --standardize"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_consensus()
{
    local word_list="  -h --help -t --table"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_filter()
{
    local word_list="  -h --help -s --shorter-than -l --longer-than -c --composition"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_grep()
{
    local word_list="  -h --help -q --match-sequence -f --file -L --files-without-match -l --files-with-matches -w --wrap -P --perl-regexp -G --ambiguous-nucl -I --case-sensitive -v --invert-match -o --only-matching -B --before-context -A --after-context -C --context -c --count -m --count-matches -x --line-regexp -X --exact -g --gapped -b --both-strands -r --reverse-only -y --no-color -Y --force-color -S --preserve-color --color --gff --gff-type --fastain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_md5sum()
{
    local word_list="  -h --help -i --ignore-case -q --each-sequence -s --all-sequences -d --all-headers -r --replace-header"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_head()
{
    local word_list="  -h --help -n --entries -f --first -l --last"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_permute()
{
    local word_list="  -h --help -w --word-size -s --start-offset -e --end-offset --seed"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_reverse()
{
    local word_list="  -h --help -c --complement -V --no-validate -S --preserve-color -Y --force-color"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_sample()
{
    local word_list="  -h --help -n --number --seed"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_sniff()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_sort()
{
    local word_list="  -h --help -x --regex -r --reverse -n --numeric-sort -l --length-sort -R --random-sort -k --key -t --field-separator -p --pair-separator"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_split()
{
    local word_list="  -h --help -n --number -q --seqs -p --prefix"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_stat()
{
    local word_list="  -h --help -d --delimiter -q --byseq -I --case-sensitive -m --count-lower -c --counts -t --type -l --length -p --proportion -C --aa-profile -g --hist -G --log-hist"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_subseq()
{
    local word_list="  -h --help -b --bounds -f --gff -k --keep -c --color -a --annotate -Y --force-color"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_tail()
{
    local word_list="  -h --help -n --entries -f --first -l --last"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_translate()
{
    local word_list="  -h --help -s --from-start -f --all-frames -c --cds"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_uniq()
{
    local word_list="  -h --help -c --count -d --repeated -u --uniq -p --pack -P --unpack -z --pack-sep -f --first-header --removed"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_smof_wc()
{
    local word_list="  -h --help -m --chars -l --lines"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _smof smof
